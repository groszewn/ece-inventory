@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def add_comment_to_request_accept(request, pk):
    indiv_request = Request.objects.get(request_id=pk)
    if request.method == "POST":
        form = AddCommentRequestForm(request.POST) # create request-form with the data from the request
        if form.is_valid():
            indiv_request = Request.objects.get(request_id=pk)
            item = Item.objects.get(item_name=indiv_request.item_name)
            if item.quantity >= indiv_request.request_quantity:
                comment = form['comment'].value()
                indiv_request = Request.objects.get(request_id=pk)
                item = Item.objects.get(item_name=indiv_request.item_name)
                user = request.user
                token, create = Token.objects.get_or_create(user=user)
                http_host = get_host(request)
                url=http_host+'/api/requests/approve/'+pk+'/'
                payload = {'comment':comment}
                header = {'Authorization': 'Token '+ str(token), 
                          "Accept": "application/json", "Content-type":"application/json"}
                requests.put(url, headers = header, data = json.dumps(payload))
                if indiv_request.type == "Dispersal": 
                    messages.success(request, ('Successfully disbursed ' + indiv_request.item_name.item_name + ' (' + indiv_request.user_id +')'))
                elif indiv_request.type == "Loan":
                    messages.success(request, ('Successfully loaned ' + indiv_request.item_name.item_name + ' (' + indiv_request.user_id +')'))
            else:
                    messages.error(request, ('Not enough ' + indiv_request.item_name.item_name + ' remaining to approve this request.'))
            if "request_detail" in request.META.get('HTTP_REFERER'):
                return redirect(reverse('custom_admin:index'))
            return redirect(request.META.get('HTTP_REFERER'))  
    else:
        form = AddCommentRequestForm() # blank request form with no data yet
    return render(request, 'custom_admin/request_accept_comment_inner.html', {'form': form, 'pk':pk, 'num_requested':indiv_request.request_quantity, 'num_available':Item.objects.get(item_name=indiv_request.item_name).quantity, 'item_name':indiv_request.item_name.item_name})

@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def edit_item_module(request, pk):
    item = Item.objects.get(item_id=pk)
    custom_fields = Custom_Field.objects.all()
    custom_vals = Custom_Field_Value.objects.filter(item = item)
    original_quantity = item.quantity
    if request.method == "POST":
        form = ItemEditForm(request.user, custom_fields, custom_vals, request.POST or None, instance=item)
        if form.is_valid():
            values_custom_field = []
            if int(form['quantity'].value())!=original_quantity:    
                Log.objects.create(request_id = None, item_id=str(item.item_id), item_name=item.item_name, initiating_user=request.user, nature_of_event='Override', 
                                         affected_user='', change_occurred="Change quantity from " + str(original_quantity) + ' to ' + str(form['quantity'].value()))
            else:
                Log.objects.create(request_id=None, item_id = str(item.item_id), item_name=item.item_name, initiating_user=request.user, nature_of_event='Edit', 
                                         affected_user='', change_occurred="Edited " + str(form['item_name'].value()))
            form.save()
            for field in custom_fields:
                field_value = form[field.field_name].value()
                if Custom_Field_Value.objects.filter(item = item, field = field).exists():
                    custom_val = Custom_Field_Value.objects.get(item = item, field = field)
                else:
                    custom_val = Custom_Field_Value(item=item, field=field)
                custom_val.value = field_value
                custom_val.save()
#             user = request.user
#             token, create = Token.objects.get_or_create(user=user)
#             http_host = get_host(request)
#             url=http_host+'/api/items/'+pk+'/'
#             payload = {'item_name':form['item_name'].value(), 'quantity':int(form['quantity'].value()), 
#                        'model_number':form['model_number'].value(), 'description':form['description'].value(), 
#                        'values_custom_field': values_custom_field}
#             header = {'Authorization': 'Token '+ str(token), 
#                       "Accept": "application/json", "Content-type":"application/json"}
#             requests.put(url, headers = header, data = json.dumps(payload))
            messages.success(request, ('Edited ' + item.item_name + '. (' + request.user.username +')'))
            return redirect('/item/' + pk)
    else:
        form = ItemEditForm(request.user, custom_fields, custom_vals, instance=item)
    return render(request, 'custom_admin/item_edit_module_inner.html', {'form': form, 'pk':pk})
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def add_comment_to_request_deny(request, pk):
    indiv_request = Request.objects.get(request_id=pk)
    if request.method == "POST":
        form = AddCommentRequestForm(request.POST) # create request-form with the data from the request
        if form.is_valid():
            comment = form['comment'].value()
            user = request.user
            token, create = Token.objects.get_or_create(user=user)
            http_host = get_host(request)
            url=http_host+'/api/requests/deny/'+pk+'/'
            payload = {'comment':comment}
            header = {'Authorization': 'Token '+ str(token), 
                      "Accept": "application/json", "Content-type":"application/json"}
            requests.put(url, headers = header, data = json.dumps(payload))
            indiv_request = Request.objects.get(request_id=pk)
            messages.success(request, ('Denied disbursement ' + indiv_request.item_name.item_name + ' (' + indiv_request.user_id +')'))
            if "request_detail" in request.META.get('HTTP_REFERER'):
                return redirect(reverse('custom_admin:index'))
            return redirect(request.META.get('HTTP_REFERER')) 
    else:
        form = AddCommentRequestForm() # blank request form with no data yet
    return render(request, 'custom_admin/request_deny_comment_inner.html', {'form': form, 'pk':pk, 'num_requested':indiv_request.request_quantity, 'num_available':Item.objects.get(item_name=indiv_request.item_name).quantity, 'item_name':indiv_request.item_name.item_name})
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def convert_loan(request, pk): #redirect to main if deleted
    loan = Loan.objects.get(loan_id=pk)
    loan_orig_quantity = loan.total_quantity
    if request.method == "POST":
        form = ConvertLoanForm(loan.total_quantity, request.POST)
        if form.is_valid():
            url = get_host(request) + '/api/loan/' + loan.loan_id + '/'
            payload = {'convert':form['items_to_convert'].value()}
            header = get_header(request)
            response = requests.post(url, headers = header, data=json.dumps(payload))
            if response.status_code == 201:
               messages.success(request, ('Converted ' + form['items_to_convert'].value() + ' from loan of ' + loan.item_name.item_name + ' to disbursement. (' + loan.user_name +')'))
            else:
                messages.error(request, ('Failed to convert ' + form['items_to_convert'].value() + ' from loan of ' + loan.item_name.item_name + ' to disbursement. (' + loan.user_name +')'))
            if loan_orig_quantity - int(form['items_to_convert'].value()) <= 0:
                return redirect('/customadmin')
            return redirect(request.META.get('HTTP_REFERER')) 
    else:
        form = ConvertLoanForm(loan.total_quantity) 
    return render(request, 'custom_admin/convert_loan_inner.html', {'form': form, 'pk':pk, 'num_loaned' : loan.total_quantity, 'item_name':loan.item_name.item_name})
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/') #redirect to main if deleted
def check_in_loan(request, pk):
    loan = Loan.objects.get(loan_id=pk)
    if request.method == "POST":
        loan = Loan.objects.get(loan_id=pk)
        loan_orig_quantity = loan.total_quantity
        form = CheckInLoanForm(loan.total_quantity, request.POST) 
        if form.is_valid():
            item = loan.item_name
            items_checked_in = form['items_to_check_in'].value()
            user = request.user
            token, create = Token.objects.get_or_create(user=user)
            http_host = get_host(request)
            url=http_host+'/api/loan/'+pk+'/'
            payload = {'check_in':int(items_checked_in), 'total_quantity': loan.total_quantity, 'comment':loan.comment}
            header = {'Authorization': 'Token '+ str(token), 
                      "Accept": "application/json", "Content-type":"application/json"}
            requests.delete(url, headers = header, data = json.dumps(payload))
            messages.success(request, ('Successfully checked in ' + items_checked_in + ' ' + item.item_name + '.'))
            if loan_orig_quantity - int(form['items_to_check_in'].value()) <= 0:
                 return redirect('/customadmin')
            return redirect(request.META.get('HTTP_REFERER'))
    else:
        form = CheckInLoanForm(loan.total_quantity) # blank request form with no data yet
    return render(request, 'custom_admin/loan_check_in_inner.html', {'form': form, 'pk':pk, 'num_loaned' : loan.total_quantity, 'item_name':loan.item_name.item_name})
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def edit_loan(request, pk):
    loan = Loan.objects.get(loan_id=pk)
    if request.method == "POST":
        form = EditLoanForm(request.POST, instance=loan) 
        if form.is_valid():
            post = form.save(commit=False)
            user = request.user
            token, create = Token.objects.get_or_create(user=user)
            http_host = get_host(request)
            url=http_host+'/api/loan/'+loan.loan_id+'/'
            payload = {'comment': post.comment,'total_quantity':post.total_quantity}
            header = {'Authorization': 'Token '+ str(token), 
                      "Accept": "application/json", "Content-type":"application/json"}
            response = requests.put(url, headers = header, data=json.dumps(payload))
            if response.status_code == 304:
                messages.error(request, ('You cannot loan more items than the quantity available.'))
                return redirect(request.META.get('HTTP_REFERER'))
            messages.success(request, ('Successfully edited loan for ' + loan.item_name.item_name + '.'))
            return redirect(request.META.get('HTTP_REFERER'))
    else:
        form = EditLoanForm(instance=loan) # blank request form with no data yet
    return render(request, 'custom_admin/edit_loan_inner.html', {'form': form, 'pk':pk, 'num_left':loan.item_name.quantity, 'item_name':loan.item_name.item_name})
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def post_new_disburse(request):
    if request.method == "POST":
        form = DisburseForm(request.POST) # create request-form with the data from the request        
        if form.is_valid():
            item = Item.objects.get(item_id=form['item_field']).value()
            user = request.user
            token, create = Token.objects.get_or_create(user=user)
            http_host = get_host(request)
            url=http_host+'/api/disbursements/direct/'+item.item_id+'/'
            payload = {'total_quantity':int(form['total_quantity'].value()), 
                       'comment':form['comment'].value(), 'type':form['type'].value()}
            header = {'Authorization': 'Token '+ str(token), 
                      "Accept": "application/json", "Content-type":"application/json"}
            requests.post(url, headers = header, data=json.dumps(payload))
#             post = form.save(commit=False)
#             post.admin_name = request.user.username
#             id_requested = form['item_field'].value()
#             item = Item.objects.get(item_id=id_requested)
#             post.item_name = item
#             post.user_name = User.objects.get(id=form['user_field'].value()).username
#             post.time_disbursed = timezone.localtime(timezone.now())
            if item.quantity >= int(form['total_quantity'].value()):
                pass
#                 # decrement quantity in item
#                 quant_change = int(form['total_quantity'].value())
#                 item.quantity = F('quantity')-int(form['total_quantity'].value()) 
#                 item.save()
#                 Log.objects.create(request_id=None, item_id=item.item_id, item_name=item.item_name, initiating_user=request.user, nature_of_event='Disburse', 
#                                          affected_user=post.user_name, change_occurred="Disbursed " + str(quant_change))
#                 try:
#                     prepend = EmailPrependValue.objects.all()[0].prepend_text+ ' '
#                 except (ObjectDoesNotExist, IndexError) as e:
#                     prepend = ''
#                 subject = prepend + 'Direct Dispersal'
#                 to = [User.objects.get(username=post.user_name).email]
#                 from_email='noreply@duke.edu'
#                 ctx = {
#                     'user':post.user_name,
#                     'item':item.item_name,
#                     'quantity':quant_change,
#                     'disburser':request.user.username,
#                     'type':'disbursed',
#                 }
#                 message=render_to_string('inventory/disbursement_email.txt', ctx)
#                 EmailMessage(subject, message, bcc=to, from_email=from_email).send()
            else:
                messages.error(request, ('Not enough stock available for ' + item.item_name + ' (' + User.objects.get(id=form['user_field'].value()).username +')'))
                return redirect(reverse('custom_admin:index'))
            #post.save()
            messages.success(request, 
                                 ('Successfully disbursed ' + form['total_quantity'].value() + " " + item.item_name + ' (' + User.objects.get(id=form['user_field'].value()).username +')'))
        
            return redirect('/customadmin')
    else:
        form = DisburseForm() # blank request form with no data yet
    return render(request, 'custom_admin/single_disburse_inner.html', {'form': form})    
@login_required(login_url='/login/')
@user_passes_test(admin_check, login_url='/login/')
def edit_permission(request, pk):
    user = User.objects.get(username = pk)
    if request.method == "POST":
        form = UserPermissionEditForm(request.POST or None, instance=user, initial={'username': user.username, 'email':user.email})
        if form.is_valid():    
            print(form.cleaned_data)
            user = request.user
            token, create = Token.objects.get_or_create(user=user)
            http_host = get_host(request)
            url=http_host+'/api/users/'+form['username'].value()+'/'
            payload = {'username':form['username'].value(), 'is_superuser':form.cleaned_data.get('is_superuser'),
                       'is_staff':form.cleaned_data.get('is_staff'), 'is_active':form['is_active'].value(), 
                       'email':form['email'].value()}
            header = {'Authorization': 'Token '+ str(token), 
                      "Accept": "application/json", "Content-type":"application/json"}
            requests.put(url, headers = header, data = json.dumps(payload))
            #form.save()
            #Log.objects.create(request_id = None, item_id=None, item_name='', initiating_user=request.user, nature_of_event='Edit', 
            #                             affected_user=user.username, change_occurred="Changed permissions for " + str(user.username))
            return redirect('/customadmin')
    else:
        form = UserPermissionEditForm(instance = user, initial = {'username': user.username, 'email':user.email})
    return render(request, 'custom_admin/user_edit.html', {'form': form})

########Email Stuffs
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def delete_task_queue(request):
    user = request.user
    token, create = Token.objects.get_or_create(user=user)
    http_host = get_host(request)
    url=http_host+'/api/loan/email/dates/delete/'
    header = {'Authorization': 'Token '+ str(token), 
              "Accept": "application/json", "Content-type":"application/json"} 
    requests.delete(url, headers = header)#, data = json.dumps(payload_loan_body))
    return loan_reminder_body(request)

def delay_email(request):
    #task_email.apply_async(eta=datetime.now()+timedelta(seconds=5))
    task_email.apply_async(eta=datetime.utcnow()+timedelta(minutes=5))
    return redirect(reverse('custom_admin:log'))
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def create_email(request):
    email = mail.EmailMessage(
        'Testing delayed email', 
        'Body goes here', 
        'noreply@duke.edu', 
        ['nrg12@duke.edu'], 
    )
    email.send(fail_silently=False)
    return redirect(reverse('custom_admin:log'))
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def change_email_prepend(request):
    try:
        text = EmailPrependValue.objects.all()[0].prepend_text
    except (ObjectDoesNotExist, IndexError) as e:
        text=''
    if request.method == "POST":
        form = ChangeEmailPrependForm(request.POST or None, initial={'text': text})
        if form.is_valid():
            if form['text'].value() == text:
                return redirect('/customadmin')
            else:
                EmailPrependValue.objects.all().delete()
                EmailPrependValue.objects.create(prepend_text=form['text'].value())
            return redirect('/customadmin')
    else:
        form = ChangeEmailPrependForm(initial={'text':text})
    return render(request, 'custom_admin/change_prepend.html', {'form': form})
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def subscribe(request):
    exists = SubscribedUsers.objects.filter(user=request.user.username).exists()
    if request.method == "POST":
        form = SubscribeForm(request.POST or None, initial = {'subscribed': exists})
        if form.is_valid(): 
            user = request.user
            token, create = Token.objects.get_or_create(user=user)
            http_host = get_host(request)
            url=http_host+'/api/subscribe/'+user.username+'/'
            payload = {'user':user.username, 'email':user.email}
            header = {'Authorization': 'Token '+ str(token), 
                      "Accept": "application/json", "Content-type":"application/json"} 
            if form['subscribed'].value():
                requests.post(url, headers = header, data = json.dumps(payload))
                #SubscribedUsers.objects.get_or_create(user=request.user.username)
            else:
                requests.delete(url, headers=header, data=json.dumps(payload))
            return redirect('/customadmin')
    else:
        form = SubscribeForm(initial = {'subscribed': exists})
    return render(request, 'custom_admin/subscribe.html', {'form': form}) 
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def loan_reminder_body(request):
    try:
        body = LoanReminderEmailBody.objects.all()[0]
    except (ObjectDoesNotExist, IndexError) as e:
        body = LoanReminderEmailBody.objects.create(body='')
    try:
        start_dates = [str(x.date) for x in LoanSendDates.objects.all()]
        selected_dates = []
        for d in start_dates:
            selected_dates.append(d)
    except ObjectDoesNotExist:
        selected_dates = None
    if request.method == "POST":
        form = ChangeLoanReminderBodyForm(request.POST or None, initial={'body':body.body})
        if form.is_valid():
            input_date_list = form['send_dates'].value().split(',')
            #output_date_list = [datetime.strptime(x, "%m/%d/%Y") for x in input_date_list]
            payload_send_dates=[]
            for date in input_date_list:
                if date != '':
                    lst = date.split('/')
                    formatted = lst[2]+'-'+lst[0]+'-'+lst[1]
                    payload_send_dates.append({'date':formatted})
              
                #LoanSendDates.objects.create(date=date)
                #task_email.apply_async(eta=date+timedelta(hours=3))
            #LoanReminderEmailBody.objects.create(body=form['body'].value())
            user = request.user
            token, create = Token.objects.get_or_create(user=user)
            http_host = get_host(request)
            url_send_dates=http_host+'/api/loan/email/dates/configure/'
            url_loan_body = http_host+'/api/loan/email/body/'
            payload_loan_body = {'body':form['body'].value()}
            header = {'Authorization': 'Token '+ str(token), 
                      "Accept": "application/json", "Content-type":"application/json"} 
            requests.post(url_loan_body, headers = header, data = json.dumps(payload_loan_body))
            requests.post(url_send_dates, headers = header, data = json.dumps(payload_send_dates))
            return redirect(reverse('custom_admin:change_loan_body'))
    else:
        form = ChangeLoanReminderBodyForm(initial= {'body':body.body})
    return render(request, 'custom_admin/loan_email_body.html', {'form':form, 'selected_dates':sorted(selected_dates)})
@login_required(login_url='/login/')
@user_passes_test(staff_check, login_url='/login/')
def log_item(request):
    form = LogForm(request.POST or None)
    if request.method=="POST":
        form = LogForm(request.POST)
        if form.is_valid():
            item = Item.objects.get(item_id=form['item_name'].value())
            change_type = form['item_change_status'].value()
            amount = int(form['item_amount'].value())
            if change_type == 'Acquired':  # this correlates to the item_change_option numbers for the tuples
                item.quantity = F('quantity')+amount
                Log.objects.create(request_id=None, item_id=item.item_id, item_name=item.item_name, initiating_user=request.user, nature_of_event="Acquire", 
                                   affected_user='', change_occurred="Acquired " + str(amount))
                item.save()
                messages.success(request, ('Successfully logged ' + str(item.item_name) + ' (added ' + str(amount) +')'))
            elif change_type == "Broken":
                if item.quantity >= amount:
                    item.quantity = F('quantity')-amount
                    item.save()
                    Log.objects.create(request_id=None, item_id=item.item_id, item_name=item.item_name, initiating_user=request.user, nature_of_event="Broken", 
                                       affected_user='', change_occurred="Broke " + str(amount))
                    messages.success(request, ('Successfully logged ' + item.item_name + ' (removed ' + str(amount) +')'))
                else:
                    messages.error(request, ("You can't break more of " + item.item_name + " than you have."))
                    return redirect(reverse('custom_admin:index'))
            elif change_type == "Lost":
                if item.quantity >= amount:
                    item.quantity = F('quantity')-amount
                    item.save()
                    Log.objects.create(request_id=None, item_id=item.item_id, item_name=item.item_name, initiating_user=request.user, nature_of_event="Lost", 
                                       affected_user='', change_occurred="Lost " + str(amount))
                    messages.success(request, ('Successfully logged ' + item.item_name + ' (removed ' + str(amount) +')'))
                else:
                    messages.error(request, ("You can't lose more of " + item.item_name + " than you have."))
                    return redirect(reverse('custom_admin:index'))
            form.save()
            return redirect('/customadmin')
        else:
            messages.error(request, ('Please enter a valid value in order to submit this form.'))
    return render(request, 'inventory/log_item.html', {'form': form})


